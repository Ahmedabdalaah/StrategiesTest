// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TPCTest;

#nullable disable

namespace TPCTest.Migrations
{
    [DbContext(typeof(APPDBContext))]
    [Migration("20240217235225_tpctest")]
    partial class tpctest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("PersonSequence");

            modelBuilder.Entity("TPCTest.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [PersonSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("TPCTest.Models.Customer", b =>
                {
                    b.HasBaseType("TPCTest.Models.Person");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("TPCTest.Models.Employee", b =>
                {
                    b.HasBaseType("TPCTest.Models.Person");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("TPCTest.Models.Manager", b =>
                {
                    b.HasBaseType("TPCTest.Models.Person");

                    b.Property<int>("VIPNumer")
                        .HasColumnType("int");

                    b.ToTable("Manager", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
